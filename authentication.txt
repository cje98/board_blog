[인증 방식]
1. Basic Authentication
- 사용자 이름 / 비밀번호를 Base64로 인코딩하여 Authorization 헤더에 포함하여 전송됨
- 매우 안전하지 않음, SSL/TLS와 함께 사용됨

Authorization : Basic으로 인코딩된 내용 전송됨

2. Bearer Token Authentication(프로젝트에 사용할 방식)
- 헤더에 토큰을 포함하여 전송 / Authorization 헤더에 포함하여 전송
- JWT 방식을 사용하여 인증 처리
- 간단한 방식이며, 상태를 유지하지 않음, 확장성 좋음
- 토큰 노출 위험, 토큰 관리

* JWT(Json Web Token) : 클레임이라고 불리는 정보를 JSON 형태로 안전하게 전송하기 위한 토큰 기반의 표준
- 인증과 정보 교환에 사용, 서명이 되어 있어서 신뢰성 확보 가능

1) Header : 토큰의 타입과 사용된 알고리즘 정보를 담고 있음, Base64Url로 인코딩
2) Payload : 클레임 정보, 대상, 발행자, 만료 시간 등 다양한 정보가 포함됨, Base64Url로 인코딩
3) Signature : Header와 Payload, Secret Key를 사용하여 생성된 서명

인증, 정보교환 할 수 있게 만들어 줄 예정!

JWT 장점
- 상태 유지 X : 서버가 클라이언트의 상태를 유지할 필요 없음
- 간단하고 자기 포함적 : 자신을 포함해서 모든 정보를 포함하고 있음
- 확장성 높음 : 하나를 만들어놓으면 여러 곳에 사용할 수 있음

JWT 단점
- 크기 : 클레임(Claim)이 많을수록 토큰의 크기가 커짐
- 보안 : 서명은 되어 있어 신뢰성을 가질 수 있지만, 암호화는 되어있지 않아 중요한 정보를 JWT에 포함하면 안됨, 구분자 정도만(영향력 X)값들만 넣어놓는 편
- 토큰 관리 : 만료 시간, 갱신 잘 해줘야 함

build.gradle에서 dependencies에 넣어주기
implementation group:'io.jsonwebtoken', name= 'jjwt', version:'0.9.1'

Authorization : Bearer ~~ 로 전송됨

3. OAuth
- 토큰 기반 인증 방식, 사용자가 직접 자격을 증명 X 미리 인증 받아서 토큰을 발급 받음
- 이 토큰을 이요하여 API를 요청하는 방식 OAuth 2.0이 요즘 버전

Kakao / Naver / Git / Facebook에서 사용하는 인증 방식

4. API Key : key 발급 받고 포함해서 전송
5. Session based Authentication : Http는 상태를 유지 X, 세션 Id 생성해서 클라이언트에 전달하면 클라이언트는 헤더나 쿠키에 포함시켜 전송하는 방식

